{"version":3,"sources":["NcCode/NcCode.js","Draw/threeHelper.js","Draw/Draw.js","App.js","serviceWorker.js","index.js"],"names":["NcCode","props","setCode","useState","line","setLine","lineRef","useRef","className","ref","lines","i","push","key","renderLines","onChange","evt","target","value","split","linesLen","length","onScroll","current","scrollTop","ThreeHelper","width","height","this","scene","THREE","camera","renderer","setSize","position","set","lookAt","background","mouseLeftDown","mousePosition","OrbitControls","domElement","maxPolarAngle","Math","PI","points","color","material","linePoints","geometry","setFromPoints","name","add","clone","console","log","children","remove","animate","requestAnimationFrame","bind","render","grid","Draw","setWidth","setHeight","mount","setMount","initFlag","setInitFlag","threeHelper","setThreeHelper","mountRef","useCallback","node","getBoundingClientRect","clear","useEffect","coordinate","appendChild","getRendererDom","init","window","WebGLRenderingContext","App","code","c","match","x","replace","y","z","id","Boolean","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fc6081b8.chunk.js","sourcesContent":["import React, { useState, useRef} from 'react';\r\nimport './index.css'\r\n\r\nfunction NcCode(props) {\r\n    let {setCode} = props\r\n    let [line, setLine] = useState(1);\r\n    let lineRef = useRef(null);\r\n\r\n    function renderLines() {\r\n        let lines = []\r\n\r\n        for (let i = 1; i <= line; i++) {\r\n            lines.push(<div key={`line-${i}`}>{i}.</div>)\r\n        }\r\n\r\n        return lines\r\n    }\r\n\r\n    function handleOnChange(evt) {\r\n        let value = evt.target.value\r\n        let lines = value.split(/[\\n\\r]/g)\r\n        let linesLen = lines.length;        \r\n        \r\n        setLine(linesLen)\r\n        setCode && setCode(lines);\r\n    }\r\n\r\n    function handleScroll(evt){            \r\n        lineRef.current.scrollTop = evt.target.scrollTop;\r\n    }\r\n\r\n    return <section className='nccode center'>\r\n        <div className=\"line-nums code-style\" ref={lineRef}>            \r\n            {renderLines()}            \r\n        </div>\r\n        <div className=\"cnc-code center\">\r\n            <textarea\r\n                className='code-style resize-none'\r\n                onChange={handleOnChange}\r\n                onScroll={handleScroll} />\r\n        </div>\r\n    </section>\r\n}\r\n\r\nexport default NcCode ","import * as THREE from 'three'\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\r\n\r\nexport class ThreeHelper {\r\n\r\n    constructor(width, height) {\r\n        this.scene = new THREE.Scene();\r\n        this.camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\r\n        this.renderer = new THREE.WebGLRenderer();\r\n        this.renderer.setSize(width, height);\r\n        this.camera.position.set(0, 500, 500);\r\n        this.camera.lookAt(this.scene.position);\r\n        this.scene.background = new THREE.Color(0x000000);\r\n        this.mouseLeftDown = false\r\n        this.mousePosition = []\r\n\r\n        let controls = new OrbitControls( this.camera, this.renderer.domElement );\r\n        controls.maxPolarAngle = Math.PI * 0.5;  \r\n    }\r\n\r\n    line(points = [], color = 0xdddddd) {\r\n\r\n        let material = new THREE.LineBasicMaterial({ color });\r\n        let linePoints = [];\r\n\r\n        for (let i of points) {\r\n            linePoints.push(new THREE.Vector3(i[0], i[1], i[2]))\r\n        }\r\n\r\n        let geometry = new THREE.BufferGeometry().setFromPoints(linePoints);\r\n        let line = new THREE.Line(geometry, material);\r\n\r\n        line.name = \"drawline\";\r\n        this.scene.add(line.clone())\r\n\r\n        console.log(this.scene.children)\r\n    }\r\n\r\n    clear() {\r\n        this.scene.remove(this.scene.children[1])\r\n    }\r\n\r\n    animate() {\r\n        let animate = this.animate;\r\n        requestAnimationFrame(animate.bind(this));\r\n        this.renderer.render(this.scene, this.camera);\r\n    }\r\n\r\n    getRendererDom() {\r\n        return this.renderer.domElement;\r\n    }\r\n\r\n    coordinate() {\r\n        let grid = new THREE.GridHelper(500, 50);        \r\n        grid.name = 'coords'\r\n        this.scene.add(grid)\r\n    }\r\n\r\n}","import React, { useState, useEffect, useCallback } from 'react'\r\nimport './index.css'\r\nimport { ThreeHelper } from './threeHelper.js'\r\n\r\nfunction Draw(props) {\r\n    let [width, setWidth] = useState(0);\r\n    let [height, setHeight] = useState(0);\r\n    let [mount, setMount] = useState(null);\r\n    let [initFlag, setInitFlag] = useState(false);\r\n    let [threeHelper, setThreeHelper] = useState(null);\r\n    let { lines } = props\r\n\r\n    const mountRef = useCallback(node => {\r\n        if (node !== null) {\r\n            setHeight(node.getBoundingClientRect().height)\r\n            setWidth(node.getBoundingClientRect().width)\r\n            setMount(node)\r\n        }\r\n    });\r\n\r\n    let init = () => {\r\n\r\n        if (mount && !initFlag) {\r\n            console.log('Draw init');\r\n            let threeHelper = new ThreeHelper(width, height);\r\n            threeHelper.coordinate();            \r\n            mount.appendChild(threeHelper.getRendererDom())\r\n            threeHelper.animate();\r\n            setInitFlag(true);\r\n            setThreeHelper(threeHelper);\r\n        }\r\n\r\n    }\r\n    \r\n    if (lines.length > 0) {\r\n        threeHelper.clear();\r\n        threeHelper.line(lines);\r\n    }\r\n\r\n    useEffect(() => {\r\n        init()\r\n    })\r\n\r\n    return <section className='draw relative'>        \r\n        <div            \r\n            className='draw-main relative'\r\n            ref={mountRef}\r\n        />\r\n        <div className='draw-notice'>\r\n            Notice: This is using WebGL\r\n            <br />\r\n            Support WebGL : {window.WebGLRenderingContext ? 'True' : 'False'}\r\n        </div>\r\n    </section>\r\n}\r\n\r\nexport default Draw ","import React, { useState } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nimport NcCode from './NcCode/NcCode.js'\nimport Draw from './Draw/Draw.js'\n\nfunction App() {\n  let [code , setCode] = useState(null)\n\n  let lines = []\n  \n  if(code) {\n    for(let c of code){\n      if(c.match(/G0?[01]\\s*(X|x)-?[0-9]+(\\.[0-9]+)?(Y|y)-?[0-9]+(\\.[0-9]+)?(Z|z)-?[0-9]+(\\.[0-9]+)?/g)){\n        let x = c.match(/(?:X|x)-?[0-9]+(\\.[0-9]+)?/)[0].replace(/[xX]/,'');\n        let y = c.match(/(?:Y|y)-?[0-9]+(\\.[0-9]+)?/)[0].replace(/[yY]/,'');\n        let z = c.match(/(?:Z|z)-?[0-9]+(\\.[0-9]+)?/)[0].replace(/[zZ]/,'');    \n        lines.push([x,y,z]) \n      }\n    }        \n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n      <main className=\"app-main\">\n        <div id='draw-nc-code'>\n          <NcCode setCode={setCode}/>         \n        </div>\n        <div id=\"draw-emulator\">\n          <Draw lines={lines}/>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}